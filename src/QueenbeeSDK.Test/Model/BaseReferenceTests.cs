/*
 * Queenbee Recipe Schema
 *
 * Documentation for Queenbee recipe schema.
 *
 * The version of the OpenAPI document: 1.6.6
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using QueenbeeSDK.Api;
using QueenbeeSDK.Model;
using QueenbeeSDK.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace QueenbeeSDK.Test
{
    /// <summary>
    ///  Class for testing BaseReference
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class BaseReferenceTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for BaseReference
        //private BaseReference instance;

        public BaseReferenceTests()
        {
            // TODO uncomment below to create an instance of BaseReference
            //instance = new BaseReference();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BaseReference
        /// </summary>
        [Fact]
        public void BaseReferenceInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" BaseReference
            //Assert.IsInstanceOfType<BaseReference> (instance, "variable 'instance' is a BaseReference");
        }

        /// <summary>
        /// Test deserialize a ValueReference from type BaseReference
        /// </summary>
        [Fact]
        public void ValueReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a ValueReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new ValueReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TaskReference from type BaseReference
        /// </summary>
        [Fact]
        public void TaskReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a TaskReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new TaskReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a FolderReference from type BaseReference
        /// </summary>
        [Fact]
        public void FolderReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a FolderReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new FolderReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a FileReference from type BaseReference
        /// </summary>
        [Fact]
        public void FileReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a FileReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new FileReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ValueFileReference from type BaseReference
        /// </summary>
        [Fact]
        public void ValueFileReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a ValueFileReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new ValueFileReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a InputReference from type BaseReference
        /// </summary>
        [Fact]
        public void InputReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a InputReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new InputReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ValueListReference from type BaseReference
        /// </summary>
        [Fact]
        public void ValueListReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a ValueListReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new ValueListReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a ItemReference from type BaseReference
        /// </summary>
        [Fact]
        public void ItemReferenceDeserializeFromBaseReferenceTest()
        {
            // TODO uncomment below to test deserialize a ItemReference from type BaseReference
            //Assert.IsInstanceOf<BaseReference>(JsonConvert.DeserializeObject<BaseReference>(new ItemReference().ToJson()));
        }

        /// <summary>
        /// Test the property 'Annotations'
        /// </summary>
        [Fact]
        public void AnnotationsTest()
        {
            // TODO unit test for the property 'Annotations'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
